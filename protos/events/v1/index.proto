syntax = "proto3";

/**
 * Package events describes the events service and all corresponding GRPCs.
 */
package events.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "gen/go";

enum Code {
  UNSPECIFIED = 0;
  START_OF_MATCH = 1;
  END_OF_MATCH = 2;
  START_OF_QUARTER = 3;
  END_OF_QUARTER = 4;
  POSTPONED = 5;
  CLOSED = 6;
}

message Event {
  string id = 1 [(validate.rules).string.min_len = 1];
  string match_id = 2 [(validate.rules).string.min_len = 1];
  Code code = 3 [(validate.rules).enum = {in: [1, 2, 3, 4, 5, 6]}];
  optional bool head = 4;
  optional string next = 5 [(validate.rules).string.min_len = 1];
}

// Requests
message InsertRequest {
  repeated Event events = 1 [(validate.rules).repeated = {min_items: 1, max_items: 100}];
}

message GetRequest {
  string match_id = 1 [(validate.rules).string.min_len = 1];
  optional string after = 2 [(validate.rules).string.min_len = 1];
}

message OnEventsRequest {
  string match_id = 1 [(validate.rules).string.min_len = 1];
  optional string after = 2 [(validate.rules).string.min_len = 1];
}

// Responses
message InsertResponse {
  bool inserted = 1;
}

message GetResponse {
  repeated Event events = 1;
}

message OnEventsResponse {
  Event event = 1;
}

// Services
service EventsService {
  /**
  * Insert new events.
  */
  rpc Insert (InsertRequest) returns (InsertResponse) {
    option (google.api.http) = {
      post: "/v1/events"
      body: "*"
    };
  }

  /**
  * Get a list of events.
  */
  rpc Get (GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/v1/events/{match_id}"
    };
  }

  /**
  * Subscribes to receive new events from a match.
  * It must include the metadata field `x-client-id` with a valid client identifier.
  */
  rpc OnEvents (OnEventsRequest) returns (stream OnEventsResponse) {}
}